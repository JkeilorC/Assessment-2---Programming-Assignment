*AI Conversation Assistance and Reflection*

Here I record and summirise some of the assitance that I have received from AI and at the bottom a small 
reflection.

CONVERSATION 1:
QUESTION: Given the URL for the weather data, how is the information stored?
AI RESPONSE: 
The Response Format
The API returns data in JSON (JavaScript Object Notation) — a hierarchical structure made up of nested dictionaries and lists.
In Python, when you do:

response = requests.get(url)
data = response.json()

then the data becomes a Python dictionary that looks roughly like this:
{
  "data": {
    "request": [
      {"type": "City", "query": "Sydney, Australia"}
    ],
    "current_condition": [
      {
        "temp_C": "18",
        "weatherDesc": [{"value": "Partly cloudy"}],
        "humidity": "67",
        "windspeedKmph": "15",
        "precipMM": "0.2",
        ...
      }
    ],
    "weather": [
      {
        "date": "2025-10-19",
        "maxtempC": "23",
        "mintempC": "15",
        "avgtempC": "19",
        "hourly": [
          {
            "time": "0",
            "tempC": "16",
            "precipMM": "0.0",
            "humidity": "72",
            ...
          },
          {
            "time": "300",
            "tempC": "15",
            "precipMM": "0.0",
            ...
          }
          # more hourly readings here
        ]
      },
      # Next forecast day...
    ]
  }
}
Comment: This conversation allowed me to see in which nests the required information was stored.

CONVERSATION 2:
QUESTION 2: Why am I getting a "?" sign in the print section when I'm modelling the question for the location?
AI RESPONSE:
If the output still shows? (for example, the weather in Tokyo? is the following:), It’s almost certainly not your Python code, but an encoding or font issue in the terminal.
Let’s go step by step to confirm and fix it:
In the weather chatbot case:
The (You:) input is typed by a human → might include invisible or non-UTF8 characters (especially if pasted).
Your print() and API URL both require plain text.
The console encoding might not handle Unicode correctly, so non-ASCII symbols display as ?.
By forcing your input to pure ASCII, you guarantee:
No terminal weirdness (? replacements)
Safe integration in URLs
Cleaner output overall
  1. location.encode("ascii", "ignore")
  This converts the text (str) into a byte sequence, but only keeps characters that exist in the ASCII character set (letters, digits, punctuation, etc.).
  Any non-ASCII or special Unicode characters — like:
  “smart quotes”, non-breaking spaces, weird accents, invisible control characters, replacement symbols
  2. .decode()
  Converts the cleaned byte sequence back into a normal string.
  After this, the string only contains plain ASCII-safe characters.
  3. strip()
  Removes leading and trailing whitespace (\n, \r, \t, spaces, etc.).
  So " Tokyo \r\n" becomes "Tokyo".

CONVERSATION 3:
QUESTION: How is the best way to visualise probability information with matplotlib Python?
AI RESPONSE:
That’s a great question — the best way to visualise probability information in Matplotlib depends on what type of 
probability data you’re working with (discrete vs. continuous, single variable vs. joint distributions). Below are the most effective visualisation techniques, with examples for each type
1. Bar Chart (for discrete probabilities)
If you have outcomes like dice rolls, survey responses, or categorical events with probabilities:
2. Line Plot or Area Plot (for continuous distributions)
To visualise a probability density function (PDF), you can plot a smooth line or shaded area.
3. Histogram (for empirical probability/frequency data)
If you have sample data and want to estimate probabilities
4. Heatmap (for joint or conditional probabilities)
If you have 2D probability data (e.g., P(X,Y))
5. Cumulative Distribution Function (CDF)
To visualise the probability that a variable ≤ a value

COMMENT:
After considering all the options, I've decided to stay with Bar, as I'm working mostly
with the Pandas library, and some of the plot tools provided work with the Numpy library
And I believe that Bar is more than enough for the present assignment.

CONVERSATION 4:
QUESTION: How and why should I turn my hourly information into a Dataframe? 
AI RESPONSE:
You should turn your hourly information into a DataFrame because it allows you to handle
structured data in a tabular and consistent way. Each hourly record from the API is originally 
stored as a list of dictionaries, which is difficult to analyse directly because you would 
need to manually loop through every entry to find or calculate values.
By converting that list into a DataFrame, each key (such as "time", "tempC", "precipMM", or "chanceofrain") 
becomes a column, and each hour becomes a row. This makes it possible to use powerful pandas 
operations — for example, .astype(float) to convert text to numbers, .mean() or .max() to summarise data, and indexing or filtering to extract only what you need.
Turning hourly data into a DataFrame also improves readability and scalability. 
It keeps your data organised and makes your code easier to extend later (for instance, if you want to calculate averages, visualise trends, or compare multiple cities).
In short:
You turn your hourly information into a DataFrame so you can treat it like a 
small table instead of a raw list, enabling easy mathematical operations, efficient summaries, and cleaner, more maintainable code.

COMMENT:
This answer was really helpful as I was struggling by converting all the Hourly precipitation
chance in a Data frame, this as I was trying to get that information to visualise, and I need
It is to be in a float format.

CONVERSATION 5:
QUESTION: How can I handle API errors in case this does not get a 200 successful response?
AI RESPONSE:
When the API request is made using requests.get(),
The program first checks the HTTP response code using:

if response.status_code == 200:

If the request is successful but the API returns an internal error (for example, when the city name doesn’t exist or the API key is invalid),
the code checks for the "error" key in the JSON data:

if "error" in weather_data["data"]:
    print("Error:", weather_data["data"]["error"][0]["msg"])
    return None
This prevents the program from crashing and instead displays a user-friendly 
message explaining what went wrong (like “No matching location found”).

COMMENT:
This was really helpful when I was designing the get_weather_data function, as the program was crashing when there was an error when I was placing random text to test my code, as the URL only works if the location is well-defined.

*Reflection*

Developing this assignment was challenging from the beginning, as my knowledge about programming
was quite different to what I experienced before. Implementing different functions to be able to visualise 
and get a response from a program I made was quite enjoyable.
I believe that by completing this assessment, I have become more capable of creating code in Python. 
Also, with the help of AI in some of the doubts I have while I was programming, I was able to manage different
programming obstacles not in the hard way as it used to be (Stackoverflow), and I feel conformed with what 
I created, hoping to be able to sort upcoming code challenges with the help of the knowledge acquired by 
attending classes or developing this assessment.
