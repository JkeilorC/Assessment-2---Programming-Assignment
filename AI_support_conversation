AI Conversation Assistance
Here I record some of the assitance that I have received from AI.

CONVERSATION 1:
QUESTION: Given the URL for the weather data, how is the information stored?
AI RESPONSE: 
The Response Format
The API returns data in JSON (JavaScript Object Notation) — a hierarchical structure made up of nested dictionaries and lists.
In Python, when you do:

response = requests.get(url)
data = response.json()

then the data becomes a Python dictionary that looks roughly like this:
{
  "data": {
    "request": [
      {"type": "City", "query": "Sydney, Australia"}
    ],
    "current_condition": [
      {
        "temp_C": "18",
        "weatherDesc": [{"value": "Partly cloudy"}],
        "humidity": "67",
        "windspeedKmph": "15",
        "precipMM": "0.2",
        ...
      }
    ],
    "weather": [
      {
        "date": "2025-10-19",
        "maxtempC": "23",
        "mintempC": "15",
        "avgtempC": "19",
        "hourly": [
          {
            "time": "0",
            "tempC": "16",
            "precipMM": "0.0",
            "humidity": "72",
            ...
          },
          {
            "time": "300",
            "tempC": "15",
            "precipMM": "0.0",
            ...
          }
          # more hourly readings here
        ]
      },
      # Next forecast day...
    ]
  }
}
Comment: This conversation allowed me to see in which nests the required information was stored.

CONVERSATION 2:
QUESTION 2: Why I'm getting a "?" sign in the print section when I'm modeling the question for location?
AI RESPONSE:
If the output still shows ? (for example The weather for Tokyo? is the following:), it’s almost certainly not your Python code, but an encoding or font issue in the terminal.
Let’s go step by step to confirm and fix it:
In the weather chatbot case:
The (You:) input is typed by a human → might include invisible or non-UTF8 characters (especially if pasted).
Your print() and API URL both require plain text.
The console encoding might not handle Unicode correctly — so non-ASCII symbols display as ?.
By forcing your input to pure ASCII, you guarantee:
No terminal weirdness (? replacements)
Safe integration in URLs
Cleaner output overall
  1. location.encode("ascii", "ignore")
  This converts the text (str) into a byte sequence, but only keeps characters that exist in the ASCII character set (letters, digits, punctuation, etc.).
  Any non-ASCII or special Unicode characters — like:
  “smart quotes”, non-breaking spaces, weird accents, invisible control characters, replacement symbols
  2. .decode()
  Converts the cleaned byte sequence back into a normal string.
  After this, the string only contains plain ASCII-safe characters.
  3. strip()
  Removes leading and trailing whitespace (\n, \r, \t, spaces, etc.).
  So " Tokyo \r\n" becomes "Tokyo".

CONVERSATION 3:
